// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> grid;
Texture2D biomes;
float maxDepth;
float maxElevation;
float3 gridSize;

float4 mod289(float4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float3 mod289(float3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float4 permute(float4 x) { return mod289(((x * 34.0) + 1.0) * x); }
float4 taylorInvSqrt(float4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
float2 fade(float2 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }
float3 fade(float3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }
/// <summary>
/// Classic Perlin noise
/// </summary>
/// <param name="P">Point on a 2D grid of gradient vectors.</param>
/// <returns>Noise value.</returns>
float cnoise(float2 P)
{
	float4 Pi = floor(P.xyxy) + float4(0.0f, 0.0f, 1.0f, 1.0f);
	float4 Pf = frac(P.xyxy) - float4(0.0f, 0.0f, 1.0f, 1.0f);
	Pi = mod289(Pi); // To avoid truncation effects in permutation
	float4 ix = Pi.xzxz;
	float4 iy = Pi.yyww;
	float4 fx = Pf.xzxz;
	float4 fy = Pf.yyww;

	float4 i = permute(permute(ix) + iy);

	float4 gx = frac(i * (1.0f / 41.0f)) * 2.0f - 1.0f;
	float4 gy = abs(gx) - 0.5f;
	float4 tx = floor(gx + 0.5f);
	gx = gx - tx;

	float2 g00 = float2(gx.x, gy.x);
	float2 g10 = float2(gx.y, gy.y);
	float2 g01 = float2(gx.z, gy.z);
	float2 g11 = float2(gx.w, gy.w);

	float4 norm = taylorInvSqrt(float4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;

	float n00 = dot(g00, float2(fx.x, fy.x));
	float n10 = dot(g10, float2(fx.y, fy.y));
	float n01 = dot(g01, float2(fx.z, fy.z));
	float n11 = dot(g11, float2(fx.w, fy.w));

	float2 fade_xy = fade(Pf.xy);
	float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
	float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
	return 2.3f * n_xy;
}
float cnoiseNew(float2 P) {

	float4 Pi = floor(P.xyxy) + float4(0.0, 0.0, 1.0, 1.0);
	float4 Pf = frac(P.xyxy) - float4(0.0, 0.0, 1.0, 1.0);
	//Pi = modf(Pi, 289.0); // To avoid truncation effects in permutation
	Pi = mod289(Pi);
	float4 ix = Pi.xzxz;
	float4 iy = Pi.yyww;
	float4 fx = Pf.xzxz;
	float4 fy = Pf.yyww;
	float4 i = permute(permute(ix) + iy);
	float4 gx = 2.0 * frac(i * 0.0243902439) - 1.0; // 1/41 = 0.024...
	float4 gy = abs(gx) - 0.5;
	float4 tx = floor(gx + 0.5);
	gx = gx - tx;
	float2 g00 = float2(gx.x, gy.x);
	float2 g10 = float2(gx.y, gy.y);
	float2 g01 = float2(gx.z, gy.z);
	float2 g11 = float2(gx.w, gy.w);
	float4 norm = 1.79284291400159 - 0.85373472095314 *
		float4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	float n00 = dot(g00, float2(fx.x, fy.x));
	float n10 = dot(g10, float2(fx.y, fy.y));
	float n01 = dot(g01, float2(fx.z, fy.z));
	float n11 = dot(g11, float2(fx.w, fy.w));
	float2 fade_xy = fade(Pf.xy);
	float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
	float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}
/// <summary>
/// Classic Perlin noise
/// </summary>
/// <param name="P">Point on a 3D grid of gradient vectors.</param>
/// <returns>Noise value.</returns>
float cnoise3D(float3 P)
{
	float3 Pi0 = floor(P); // Integer part for indexing
	float3 Pi1 = Pi0 + float3(1.0f, 1.0f, 1.0f); // Integer part + 1
	Pi0 = mod289(Pi0);
	Pi1 = mod289(Pi1);
	float3 Pf0 = frac(P); // Fractional part for interpolation
	float3 Pf1 = Pf0 - float3(1.0f, 1.0f, 1.0f); // Fractional part - 1.0
	float4 ix = float4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	float4 iy = float4(Pi0.yy, Pi1.yy);
	float4 iz0 = Pi0.zzzz;
	float4 iz1 = Pi1.zzzz;

	float4 ixy = permute(permute(ix) + iy);
	float4 ixy0 = permute(ixy + iz0);
	float4 ixy1 = permute(ixy + iz1);

	float4 gx0 = ixy0 * (1.0f / 7.0f);
	float4 gy0 = frac(floor(gx0) * (1.0f / 7.0f)) - 0.5f;
	gx0 = frac(gx0);
	float4 gz0 = float4(0.5f, 0.5f, 0.5f, 0.5f) - abs(gx0) - abs(gy0);
	float4 sz0 = step(gz0, float4(0.0f, 0.0f, 0.0f, 0.0f));
	gx0 -= sz0 * (step(0.0f, gx0) - 0.5f);
	gy0 -= sz0 * (step(0.0f, gy0) - 0.5f);

	float4 gx1 = ixy1 * (1.0f / 7.0f);
	float4 gy1 = frac(floor(gx1) * (1.0f / 7.0f)) - 0.5f;
	gx1 = frac(gx1);
	float4 gz1 = float4(0.5f, 0.5f, 0.5f, 0.5f) - abs(gx1) - abs(gy1);
	float4 sz1 = step(gz1, float4(0.0f, 0.0f, 0.0f, 0.0f));
	gx1 -= sz1 * (step(0.0f, gx1) - 0.5f);
	gy1 -= sz1 * (step(0.0f, gy1) - 0.5f);

	float3 g000 = float3(gx0.x, gy0.x, gz0.x);
	float3 g100 = float3(gx0.y, gy0.y, gz0.y);
	float3 g010 = float3(gx0.z, gy0.z, gz0.z);
	float3 g110 = float3(gx0.w, gy0.w, gz0.w);
	float3 g001 = float3(gx1.x, gy1.x, gz1.x);
	float3 g101 = float3(gx1.y, gy1.y, gz1.y);
	float3 g011 = float3(gx1.z, gy1.z, gz1.z);
	float3 g111 = float3(gx1.w, gy1.w, gz1.w);

	float4 norm0 = taylorInvSqrt(float4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	float4 norm1 = taylorInvSqrt(float4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;

	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, float3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, float3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, float3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, float3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, float3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, float3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);

	float3 fade_xyz = fade(Pf0);
	float4 n_z = lerp(float4(n000, n100, n010, n110), float4(n001, n101, n011, n111), fade_xyz.z);
	float2 n_yz = lerp(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = lerp(n_yz.x, n_yz.y, fade_xyz.x);
	return 2.2f * n_xyz;
}


float FBM(float x, float y, int octaves, float scale) {
	float val = 0;
	float amp = 0.5f;
	for (int i = 0; i < octaves; i++)
	{
		val += amp * cnoiseNew(float2(x * scale * (i * 2), y * scale * (i * 2)));
		amp *= 0.2f;
	}
	return val;
}
float clamp01(float val) {
	if (val < 0) return 0;
	if (val > 1) return 1;
	return val;
}
//float floor(float x){}
//float frac(float x) { return (x - floor(x)); }
//float mod(float x, float y) { return (x - y * floor(x / y)); }
//float mix(float x, float y, float a) { return (x * (1.0f - a) + y * a); }



[numthreads(10, 1, 10)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float realX = (id.x / (float)3.0f) / 10.0f;
	float realZ = (id.z / (float)3.0f) / 10.0f;
	//float noiseVal = biomes[id.xz] * cnoise(float2(realX, realZ)) + (1 - biomes[id.xz]) * FBM(realX, realZ, 6, 1);
	//float noiseVal = FBM(realX, realZ, 6, 1);
	float noiseVal = biomes[id.xz] * cnoiseNew(float2(realX, realZ)) + (1 - biomes[id.xz]) * FBM(realX, realZ, 6, 1);
	for (int y = 0; y < maxDepth; y++)
	{
		float realY = (y / (float)3.0f) / 10.0f;
		grid[id.x + gridSize.x * y + gridSize.x * gridSize.y * id.z] = cnoise3D(float3(realX, realY, realZ)) - .5f;
	}
	//float noiseVal = cnoiseNew(float2(realX, realZ));
	for (int y = maxDepth; y < maxElevation + maxDepth + 10; y++)
	{

		//grid[id.x + gridSize.x * y + gridSize.x * gridSize.y * id.z] = ((y - maxDepth) / ((float)maxElevation + noiseVal)) / 2.0;
		//grid[id.x + gridSize.x * y + gridSize.x * gridSize.y * id.z] = (y - maxDepth) / (maxElevation + (noiseVal * 2);//clamp(((y - maxDepth) / ((float)maxElevation + noiseVal)) / 2.0, 0, 1);
		grid[id.x + gridSize.x * y + gridSize.x * gridSize.y * id.z] = clamp01(((y - maxDepth) / (float)maxElevation + noiseVal));

	}
}